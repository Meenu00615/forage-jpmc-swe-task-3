diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index 7f62295..de4f4be 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,32 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  price_abc: number,
+  price_def: number,
+  ratio: number,
   timestamp: Date,
+  upper_bound: number,
+  lower_bound: number,
+  trigger_alert: number | undefined,
 }
 
-
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]) {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
+  static generateRow(serverResponds: ServerRespond[]): Row {
+    const priceABC = (serverResponds[0].top_ask_price + serverResponds[0].top_bid_price) / 2;
+    const priceDEF = (serverResponds[1].top_ask_price + serverResponds[1].top_bid_price) / 2;
+    const ratio = priceABC / priceDEF;
+    const upperBound = 1 + 0.05;
+    const lowerBound = 1 - 0.05;
+
+    return {
+      price_abc: priceABC,
+      price_def: priceDEF,
+      ratio,
+      timestamp: serverResponds[0].timestamp > serverResponds[1].timestamp ?
+        serverResponds[0].timestamp : serverResponds[1].timestamp,
+      upper_bound: upperBound,
+      lower_bound: lowerBound,
+      trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
+    };
   }
 }
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 9d9eca7..fa2dba1 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -3,6 +3,12 @@ export interface Order {
   size: number,
 }
 export interface ServerRespond {
+  top_ask_price: any;
+  top_bid_price: any;
+  top_ask_price: any;
+  top_bid_price: any;
+  top_ask_price: any;
+  top_bid_price: any;
   stock: string,
   top_bid: Order,
   top_ask: Order,
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 277797d..fbe32fd 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,60 +1,69 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
-import { DataManipulator } from './DataManipulator';
-import './Graph.css';
 
-interface IProps {
-  data: ServerRespond[],
-}
-
-interface PerspectiveViewerElement extends HTMLElement {
-  load: (table: Table) => void,
-}
-class Graph extends Component<IProps, {}> {
-  table: Table | undefined;
-
-  render() {
-    return React.createElement('perspective-viewer');
+  import React, { Component } from 'react';
+  import { Table, TableData } from '@finos/perspective';
+  import { ServerRespond } from './DataStreamer';
+  import { DataManipulator } from './DataManipulator';
+  import './Graph.css';
+  
+  interface IProps {
+    data: ServerRespond[],
   }
-
-  componentDidMount() {
-    // Get element from the DOM.
-    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
-
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
-      elem.load(this.table);
-      elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
-      elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
-      elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
-        timestamp: 'distinct count',
-      }));
-    }
+  
+  interface PerspectiveViewerElement extends HTMLElement {
+    load: (table: Table) => void;
+    setAttribute: (name: string, value: string) => void;
   }
-
-  componentDidUpdate() {
-    if (this.table) {
-      this.table.update(
-        DataManipulator.generateRow(this.props.data),
-      );
+  
+  class Graph extends Component<IProps, {}> {
+    table: Table | undefined;
+  
+    render() {
+        return React.createElement('perspective-viewer');
+      }
+  
+    componentDidMount() {
+      // Get element from the DOM.
+      const elem = document.getElementsByTagName('perspective-viewer')[0] as PerspectiveViewerElement;
+  
+      const schema = {
+        price_abc: 'float',
+        price_def: 'float',
+        ratio: 'float',
+        timestamp: 'date',
+        upper_bound: 'float',
+        lower_bound: 'float',
+        trigger_alert: 'float',
+      };
+  
+      if (window.perspective && window.perspective.worker()) {
+        this.table = window.perspective.worker().table(schema);
+      }
+      if (this.table) {
+        // Load the `table` in the `<perspective-viewer>` DOM reference.
+        elem.load(this.table);
+        elem.setAttribute('view', 'y_line');
+        elem.setAttribute('row-pivots', '["timestamp"]');
+        elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]');
+        elem.setAttribute('aggregates', JSON.stringify({
+          price_abc: 'avg',
+          price_def: 'avg',
+          ratio: 'avg',
+          timestamp: 'distinct count',
+          upper_bound: 'avg',
+          lower_bound: 'avg',
+          trigger_alert: 'avg',
+        }));
+      }
+    }
+  
+    componentDidUpdate() {
+      if (this.table) {
+        this.table.update([
+          DataManipulator.generateRow(this.props.data)
+        ] as unknown as TableData);
+      }
     }
   }
-}
-
-export default Graph;
+  
+  export default Graph;
+  
\ No newline at end of file
